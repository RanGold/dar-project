package IC.Parser;

import IC.AST.*;
import IC.DataTypes;
import java_cup.runtime.*;
import java.util.List;
import java.util.LinkedList;

////////////////////////////////////////////
// Symbol list (terminals and non-terminals)

terminal ASSIGN,DOT,COMMA,LENGTH,LB,RB,LP,RP,LCBR,RCBR,SEMI;
terminal BOOLEAN,INT,STRING;
terminal BREAK,CONTINUE,ELSE,IF,WHILE,RETURN;
terminal CLASS,EXTENDS,NEW,STATIC,THIS,VOID,NULL;
terminal MOD,MULTIPLY,NEQUAL,DIVIDE,EQUAL,GT,GTE,LAND,LNEG,LOR,LT,LTE;
terminal FALSE,MINUS,PLUS,TRUE;
terminal String CLASS_ID;
terminal String ID;
terminal Integer INTEGER;
terminal String QUOTE;
terminal LogicalUnaryOps logicalUnaryOps;
terminal MathUnaryOps mathUnaryOps;
terminal LogicalBinaryOps logicalBinaryOps;
terminal MathBinaryOps mathBinaryOps;
terminal UMINUS;

non terminal Program program;
non terminal List<ICClass> class_list;
non terminal ICClass class_decl;
non terminal List<Field> field_list;
non terminal Method method;
non terminal List<FieldOrMethod> field_or_method_list; 
non terminal List<String> id_list;
non terminal List<Statement> statement_list;
non terminal Statement statement;
non terminal Expression expr;
non terminal List<Expression> expr_list;
non terminal Literal literal;
non terminal Location location;
non terminal Call call;
non terminal VirtualCall virtualCall;
non terminal StaticCall staticCall;

//////////////////////////
// Precedence declarations
precedence right ASSIGN;
precedence left LOR;
precedence left LAND;
precedence left EQUAL, NEQUAL;
precedence left GT, GTE, LT, LTE;
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence right UMINUS, LNEG;
precedence left LP,RP,LB,RB,DOT;
//i'm not sure this should be first :(
precedence left IF, ELSE;

//////////////
// The grammar

//program can have zero classes
program ::= {: RESULT = new Program(new LinkedList<ICClass>()); :};
			| class_list:cl
			{: RESULT = new Program(cl); :};
			
class_list ::= class_decl:cd
			{: 
				RESULT = new LinkedList<ICClass>();
				RESULT.add(cd);
			:}
			| class_list:cl class_decl:cd
			{:
				cl.getClasses().add(cd);
				RESULT = cl;
			:};

class_decl ::= CLASS CLASS_ID:cid LCBR RCBR
			{: RESULT = new ICClass(cidleft, cid, new LinkedList<Field>(), new LinkedList<Method>()); :}
			| CLASS CLASS_ID:cid LCBR field_or_method_list:foml RCBR
			{: RESULT = new ICClass(cidleft, cid, FieldOrMethod.getFields(foml), FieldOrMethod.getMethods(foml)); :}
			| CLASS CLASS_ID:cid EXTENDS CLASS_ID:bid LCBR RCBR
			{: RESULT = new ICClass(cidleft, cid, bid, new LinkedList<Field>(), new LinkedList<Method>()); :}
			| CLASS CLASS_ID:cid EXTENDS CLASS_ID:bid LCBR field_or_method_list:foml RCBR
			{: RESULT = new ICClass(cidleft, cid, bid, FieldOrMethod.getFields(foml), FieldOrMethod.getMethods(foml)); :};
			
field_or_method_list ::= field_list:fl
						{:
							RESULT = new LinkedList<FieldOrMethod>();
							RESULT.addAll(fl);
						:}
						| method_list:m
						{:
							RESULT = new LinkedList<FieldOrMethod>();
							RESULT.add(m);
						:}
						| field_or_method_list:foml field_list:fl
						{:
							foml.addAll(fl);
							RESULT = foml;
						:}
						| field_or_method_list:foml method:m
						{:
							foml.add(m);
							RESULT = foml;
						:};
						
field_list ::= type id_list:idl SEMI
			{: 
				RESULT = new LinkedList<Field>();
				for (String s : idl) {
					RESULT.add(new Field(type, s);
				}
			:};

id_list ::= ID:i
			{:
				RESULT = new LinkedList<String>();
				RESULT.add(i);
			:}
			| id_list:idl COMMA ID:i
			{:
				idl.add(i);
				RESULT = idl;
			:};

method ::= type:t ID:i LP RP LCBR statement_list:ls RCBR
			{:
				RESULT = new VirtualMethod(t, i, new LinkedList<Formal>(), statement_list);
			:}	
			| type:t ID:i LP formal_list:fl RP LCBR statement_list:ls RCBR
			{:
				RESULT = new VirtualMethod(t, i, fl, statement_list);
			:}		
			| VOID ID:i LP RP LCBR statement_list:ls RCBR
			{:
				RESULT = new VirtualMethod(DataTypes.VOID, i, new LinkedList<Formal>(), statement_list);
			:}	
			| VOID ID:i LP formal_list:fl RP LCBR statement_list:ls RCBR
			{:
				RESULT = new VirtualMethod(DataTypes.VOID, i, fl, statement_list);
			:}
			| STATIC type:t ID:i LP RP LCBR statement_list:ls RCBR
			{:
				RESULT = new StaticMethod(t, i, new LinkedList<Formal>(), statement_list);
			:}	
			| STATIC type:t ID:i LP formal_list:fl RP LCBR statement_list:ls RCBR
			{:
				RESULT = new StaticMethod(t, i, fl, statement_list);
			:}		
			| STATIC VOID ID:i LP RP LCBR statement_list:ls RCBR
			{:
				RESULT = new StaticMethod(DataTypes.VOID, i, new LinkedList<Formal>(), statement_list);
			:}	
			| STATIC VOID ID:i LP formal_list:fl RP LCBR statement_list:ls RCBR
			{:
				RESULT = new StaticMethod(DataTypes.VOID, i, fl, statement_list);
			:};

type ::= INT:integ
			{: RESULT = new PrimitiveType(integleft, DataTypes.INT); :}
		| STRING:str
			{: RESULT = new PrimitiveType(strleft, DataTypes.STRING); :}
		| BOOLEAN:bool
			{: RESULT = new PrimitiveType(boolleft, DataTypes.BOOLEAN); :}
		| CLASS_ID:class_id
			{: RESULT = new UserType(class_idleft, class_id); :}
		| type:t LB RB
			{:	
				t.incrementDimension();
				RESULT = t; 
			:};
			
formal ::= type:t ID:id
			{:
				RESULT = new Formal(t,id);
			:};

formal_list ::= formal:f
			{: 	
				RESULT = new LinkedList<Formal>(); 
				RESULT.add(f);
			:}
			| formal_list:fl COMMA formal:f
			{:	
				fl.add(f);
				RESULT = fl;
			:};

//statement_list can be empty
statement_list ::= 
				{:
					RESULT = new LinkedList<Statement>();
				:}
				| statement:s
				{: 
					RESULT = new LinkedList<Statement>();
					RESULT.add(s);
				:}
				| statement_list:sl statement:s
				{:
					sl.add(s);
					RESULT = sl;
				:};

statement ::= location:l EQUAL expr:e SEMI
			{: 
				RESULT = new Assignment(l, e);
			:}
			| call:c SEMI	
			{: 
				RESULT = new CallStatement(c);
			:}	
			| RETURN:r SEMI
			{: 
				RESULT = new Return(rleft);
			:}			
			| RETURN:r expr:e SEMI
			{: 
				RESULT = new Return(rleft,e);
			:}
			| IF LP expr:e RP statement:s SEMI
			{:
				RESULT = new If(e, s);
			:}
			| IF LP expr:e RP statement:s1 ELSE statement:s2 SEMI
			{:
				RESULT = new If(e, s1, s2);
			:}  			
			| WHILE LP expr:e RP statement:s SEMI
			{:
				RESULT = new While(e, s);
			:}
			| BREAK:b SEMI
			{: 
				RESULT = new Break(bleft);
			:}
			| CONTINUE:c SEMI
			{: 
				RESULT = new Continue(cleft);
			:}
			| LCBR:l statement_list:sl RCBR
			{: 
				RESULT = new StatementBlock(lleft,sl);
			:}
			| type:t ID:i SEMI
			{:
				RESULT = new LocalVariable(t,i);
			:}
			| type:t ID:i ASSIGN expr:e SEMI
			{:
				RESULT = new LocalVariable(t, i, e);
			:};

expr ::= location:l
		{:
			RESULT = l;
		:}	
		| call:c
		{:
			RESULT = c;
		:}	
		| THIS:t 
		{:
			RESULT = new This(tleft);
		:}
		| NEW CLASS_ID:cid LP RP
		{:
			RESULT =  new NewClass(cidleft,cid);
		:}
		| new type:t LB expr:e RB
		{:
			RESULT =  new NewArray(t, e);
		:}	
		| expr:e DOT LENGTH
		{:
			RESULT =  new Length(e);
		:}	
		| expr:e1 mathBinaryOps:bo expr:e2
		{:
			RESULT =  new MathBinaryOp(e1, bo, e2);
		:}
		| expr:e1 logicalBinaryOps:bo expr:e2
		{:
			RESULT =  new LogicalBinaryOp(e1, bo, e2);
		:}					
		| mathUnaryOps:uo expr:e
		{:
			RESULT =  new MathUnaryOp(uo, e); %prec UMINUS
		:}
		| logicalUnaryOps:uo expr:e
		{:
			RESULT =  new LogicalUnaryOp(uo, e);
		:}			
		| literal:l 
		{:
			RESULT = l;
		:}
		| LP expr:e RP
		{:
			RESULT = new ExpressionBlock(e);
		:};			

expr_list ::= expr:e
			{: 
				RESULT = new LinkedList<Expression>();
				RESULT.add(e);
			:}
			| expr_list:exprl COMMA expr:e
			{:
				exprl.add(e);
				RESULT = exprl;
			:};


call ::= virtualCall:vc
		{:
			RESULT = vc;
		:}
		| staticCall:sc
		{:
			RESULT = sc;
		:};
		
staticCall ::= CLASS_ID:cid DOT ID:id LP RP
			{:
				RESULT = new StaticCall(cidleft, cid, id, new LinkedList<Expression>());
			:}

			| CLASS_ID:cid DOT ID:id LP expr_list:exprl RP
			{:
				RESULT = new StaticCall(cidleft, cid, id, exprl);
			:};
					
virtualCall ::= ID:id LP RP
			{:
				RESULT = new VirtualCall(idleft, id, new LinkedList<Expression>());
			:}
			| ID:id LP expr_list:exprl RP
			{:
				RESULT = new VirtualCall(idleft, id, exprl);
			:}			
			| expr:e DOT ID:id LP RP
			{:
				RESULT = new VirtualCall(eleft, e, id, exprl);
			:}			
			| expr:e DOT ID:id LP expr_list:exprl RP
			{:
				RESULT = new VirtualCall(eleft, e, id, exprl);
			:};
			
location ::= ID:i
			{:
				RESULT = new VariableLocation(ileft, e, i);
			:}	
			| expr:e DOT ID:i
			{:
				RESULT = new VariableLocation(eleft, e, i);
			:}				
			| expr:e1 LB expr:e2 RB 			
			{:
				RESULT = new ArrayLocation(e1, e2);
			:};
			
logicalBinaryOps ::= LAND
				{: RESULT = BinaryOps.LAND; :}
				| LOR
				{: RESULT = BinaryOps.LOR; :}
				| LT
				{: RESULT = BinaryOps.LT; :}
				| LTE
				{: RESULT = BinaryOps.LTE; :}
				| GT
				{: RESULT = BinaryOps.GT; :}
				| GTE
				{: RESULT = BinaryOps.GTE; :}
				| EQUAL
				{: RESULT = BinaryOps.EQUAL; :}
				| NEQUAL
 				{: RESULT = BinaryOps.NEQUAL; :};
								
mathBinaryOps ::= PLUS
			{: RESULT = BinaryOps.PLUS; :}
			| MINUS
				{: RESULT = BinaryOps.MINUS; :}
			| MULTIPLY
				{: RESULT = BinaryOps.MULTIPLY; :}
			| DIVIDE
				{: RESULT = BinaryOps.DIVIDE; :}
			| MOD
				{: RESULT = BinaryOps.MOD; :};

logicalUnaryOps ::= LNEG
				{: RESULT = UnaryOps.LNEG; :};
					
mathUnaryOps ::= MINUS
			{: RESULT = UnaryOps.MINUS; :};	
		
literal ::= INTEGER:i
			{: RESULT = new Literal(ileft, LiteralTypes.INTEGER); :}
			| QUOTE:q
			{: RESULT = new Literal(qleft, LiteralTypes.STRING); :}
			| TRUE:t
			{: RESULT = new Literal(tleft, LiteralTypes.TRUE); :}
			| FALSE:f
			{: RESULT = new Literal(fleft, LiteralTypes.FALSE); :}
			| NULL:n
			{: RESULT = new Literal(nleft, LiteralTypes.NULL); :};
